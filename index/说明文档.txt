总体说明：
1、大多数页面，字体大小、间距等不标准。已大范围修改成标准尺寸（以手机实际显示效果为主）
2、订单管理页面设计不合理。三种类型订单的不同状态，如果想查看当前分类下不同状态的订单，需要操作两个步骤。返回订单管理总页面，然后再点击某个状态。操作繁琐。已经改进，某一类型的不同状态页面可以在一个页面同时查看。返回上一层到达订单管理页面。
3、积分页面，功能不一致的放在同一个页面，体验不好。且一眼进去看不到终点。建议分成两个页面。已优化，拆分成两个页面。
4、提现流程。银行卡显示不合理,一般情况下都只显示某银行尾数为多少的银行卡。不会显示所有位数。用户体验而言，敏感页面尽量内容简单，步骤简单。所以新增银行卡的填写表单页面已经摘出来，点击到达内联页面，填写信息，保存信息到当前页面。（效果实现，具体数据交互由后台完成）
5、订单列表页。文字太多，只显示主要信息即可。（有一些页面，文字写的比较小，不符合标准。所以堆砌了太多文字内容，没有考虑到小屏幕下使用。为了小屏幕下显示正常，肯定会做字符截取，一些内容会被截取较长内容，这样就造成了信息显示不完整，没有意义。比如订单号，完全可以在详情页展示即可。）
6、个人中心首页样式优化。
7、敏感操作地方，增加了用户提示。具体的提示内容可以使用 $.toast("提示信息") 调用。
8、项目实现了简易的spa单页面应用。所以需要保证页面资源是一次性引用，并且一致。整体资源只加载一次。所以后续页面会打开速度变快，且优先读取缓存。返回上一页（a标签上加back样式可以实现）等由前端路由原理实现。
9、由于页面定之化css整体都在一个reset.css文件夹写。所以后期套数据操作demo元素时候，最好添加不重复的id值，避免样式重复重叠。定义之前可以搜索一下看是否存在。
10、具体js文件在config.js，所有操作demo的事件，都绑定委托给document。这样写法，解决了一些页面js不执行问题。这样统一冒泡管理。
11、在做数据嵌套的时候记得做字符截取。建议最好使用接口，数据交互。避免html上套php，难免会出现问题。通常情况下，传统的套好数据，还需要很长时间来修改套好数据之后的页面模板bug。

项目中用到的：
1、rem布局，更好的兼容移动端。
2、使用了sui mobile框架。（阿里出品）。包含前端路由、组件、以及一些封装好的api。
3、网站整体ui icon使用了iconfont字体图标库。（阿里巴巴矢量图标库）。方便操作，便于维护。低成本实现了高保真效果。
4、框架引用和iconfont图标库引用都用了在线cdn。建议可以保持cdn线上使用。cdn本身提供了较快和稳定的服务器环境。也可以某种程度上缓解自己服务器压力。